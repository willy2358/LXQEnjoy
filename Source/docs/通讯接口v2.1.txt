
概述
本套通讯接口由两部分组成
一. http restful API，采用客户端请求，服务器响应的单向的方式
二. socket dual API，采用客户端建立到socket服务器的连接，客户端与服务器双向通讯。


两种API的请求和响应的数据，格式都是JSON，
在socket dual API 中，服务器返回或推送的JSON的数据包是包封在API的签名包中，签名包以"LXQ<(:"开始，以“:)>QXL”结束，提取API JSON包的
正则表达式为：LXQ<\(:([\w\W]*?):\)>QXL
在API的数据包中，有一个字段“cmdtype",用来表示数据包的传输方向：
httpreq: 客户端向web服务器发送的http请求
httpresp:服务器向http客户端发送的http应答
sockreq: socket客户端向socket服务器发送的socket请求
sockresp:socket服务器向客户端发送的socket应答

在web服务器和socket服务器的应答数据包中，有个“result"的字段，用来标识对应API调用的执行情况，
如果API调用失败，result的值为”ERROR“，并且在返回的数据包中，会含有两个字段“errcode"和"errmsg",errcode, 错误码；errmsg: 错误码的简短描述。
错误包的格式如下：
{
	"cmdtype":"httpresp|sockresp",
	"httpresp":"客户端发送的命令",
	"result":"ERROR",
	”errcode":11,      //错误码
	"errmsg":"",       //错误的简单描述
}
或者
{
	"cmdtype":"sockresp",
	"sockresp":"客户端发送的命令",
	"result":"ERROR",
	”errcode":11,      //错误码
	"errmsg":"",       //错误的简单描述
}

如果API调用成功，resutl的值为“OK”，会在返回的数据包中，含有一个“result-data”的字段，这个字段的值是个字符串，当字符串不为空时（比如“user”），表示数据包中还包括一个以字符串命名的对象。
成功包的格式如下：
{
	"cmdtype":"httpresp",
	"httpresp":"客户端的发送的命令",
	"result":"OK",
	"result-data":"user",  //此处的user为示例数据
	"user":	{"userid":124232，“username”：“LX323532”}
}

{
	"cmdtype":"sockresp",
	"sockresp":"客户端的发送的命令",
	"result":"OK",
	"result-data":"user",  //此处的user为示例数据
	"user":	{"userid":124232，“username”：“LX323532”}
}

下面的API中仅列出调用成功的返回结果。


一、用户信息
1.用户注册：
客户端请求：
通道：http
请求接口：http://serverid/service
请求类型：post
请求参数：
{
	"cmdtype":"httpreq",
	"httpreq":"new-user",
	"devid":"124323", //设备识别码，移动端的设备识别码，或是PC端的MAC地址
}
服务器返回：
{
	"cmdtype":"httpresp",
	"httpresp":"newuser",
	"result":"OK",
	"result-data":"user",
	"user":	{"userid":124232，“username”：“LX323532”}
}
说明：
在user中含有玩家的userid，此userid将用作玩家的唯一标识，用于后续与服务器通信的玩家唯一识别码，username是用户名，此用户名用户切换用户，密码找回等。
此接口也可用于用户作为游客身份的快速注册，登录，或无账户登录（其实对于服务器来说，这个用户还是有username和password的，只不过这些信息是由客户端按规则默认生成了，以后提供更新用户信息接口，绑定手机号，微信号等。
设想：用户打开APP就能直接进入游戏界面，无须登录，如果将初次安装，客户端静默使用设备识别码进行注册。对于已使用设备码注过的用户，默认使用设备码登录，这样以来，设备码就成了类似userid的用户标识，也即一机一户。如果用户要再多台设备登录，须在初始的设备上设置有关密码，或绑定手机，微信。然后在其他设备上切换登录。


2.用户登录：

客户端请求：
通道：http
请求接口：http://serverid/service
请求类型：post
请求参数：
{
	"cmdtype":"httpreq",
	"httpreq":"login",
	"username":"phone|email|usercode|devid", //手机号|email|游戏编号|设备ID
	"password":"124323", 
}
服务器返回：
{
	"cmdtype":"httpresp",
	"httpresp":"login",
	"result":"OK",
	"result-data":“login”，
	“login”：{

		token:{  //这个token是后续socket辨识用户的凭证，客户端向socket服务器发送的每个数据包都必须有此token，如果token不匹配，将处理为非法，恶意攻击用户
			clientid:"00001",
			salt:"123232",
			expire:"2019-04-25 10:00:00",
			signature: "signature of salt", 
		}
		
		"user-info":{
			"userid":124422,
			useralias:"user alias",
			"image":"用户头像web路径", 
			"assets":[
				      {  name:"asset1", 
			             assetid:11, 
						 amount: 13000
				      },
					  {  name:"asset2", 
			             assetid:12, 
						 amount: 53000
				      }]	
		}
	}
}
	
说明：
user-info，用户信息，具体待定


2.2 手机号登录(暂不支持)
#弃用
客户端请求：
通道：http
请求接口：http://serverid/service
请求类型：post
请求参数：
{
	"cmdtype":"httpreq",
	"httpreq":"login-phone",
	"phone":"124323", //用户手机号
	"password":"pwd", //此值为一次性的短信验证码，也可以是用户的密码，如果是密码，须为用户密码在客户端md5加密后的值
}
服务器返回：
{
	"cmdtype":"httpresp",
	"httpresp":"login-phone",
	"result":"OK",
	"result-data":“login-phone”，
	“login”：{
		"session-token":"YMQV7AJWINUMJCM4AIOQ5HTW2PDGHJQN"，
		//这个token是后续socket辨识用户的凭证，客户端向socket服务器发送的每个数据包都必须有此token，如果token不匹配，将处理为非法，恶意攻击用户
		"user-info":{
			"userid":124422,
			"image":"用户头像web路径", 
			"assets":"用户资产"
		}
	}
}
说明：
user-info，用户信息，具体待定

2.3 用户名登录
#弃用
客户端请求：
通道：http
请求接口：http://serverid/service
请求类型：post
请求参数：
{
	"cmdtype":"httpreq",
	"httpreq":"login-username",
	"username":"124323", //用户名，以LX开头的一个随机数字串
	"password":"pwd", //用户的密码，须为用户密码在客户端md5加密后的值
}
服务器返回：
{
	"cmdtype":"httpresp",
	"httpresp":"login-username",
	"result":"OK",
	"result-data":“login”，
	“login”：{
		"session-token":"YMQV7AJWINUMJCM4AIOQ5HTW2PDGHJQN"，
		//这个token是后续socket辨识用户的凭证，客户端向socket服务器发送的每个数据包都必须有此token，如果token不匹配，将处理为非法，恶意攻击用户
		"user-info":{
			"userid":124422,
			"image":"用户头像web路径", 
			"assets":"用户资产"
		}
	}
}
说明：
user-info，用户信息，具体待定

3.用户信息查询，此接口用于查询用户的可公开信息
客户端请求：
通道：http
请求接口：http://serverid/service
请求类型：post
请求参数：
{
	"cmdtype":"httpreq",
	"httpreq":"user-info",
	"userid":"124323",
}
服务器返回：
{
	"cmdtype":"httpresp",
	"httpresp":"user-info",
	"result":"OK"
	"result-data":"user-info"
	"user-info":{
		"userid":2313,
		"username":"LX213131",
	  	"image":"http://webserverip//userimg/12322.png",
	  	"assets":{} //用户资产
	}
}

4. 用户信息更新
客户端请求：
通道：http
请求接口：http://serverid/service
请求类型：post
请求参数：
{
	"cmdtype":"httpreq",
	"httpreq":"user-update",
	"userid":"124323",
	“userinfo":{"phone":12342233122,   //手机号
                    "password":"dfsfew",   //密码
                    "weixin":"fersgg",     //微信号
                    "image":""           //用户头像
                    “alias":"",        //用户昵称
                    }          
}

服务器返回：
{
	"cmdtype":"httpresp",
	"httpresp":"user-update",
	"result":"OK"
	"result-data":""
}

说明：在userinfo中信息可以是一项或多项，比如只有image,或是两项：phone和alias

5. 用户更新/设置密码

客户端请求：
通道：http
请求接口：http://serverid/service
请求类型：post
请求参数：
{
	"cmdtype":"httpreq",
	"httpreq":"set-pwd",
    userid:22,
    devid:"wqrrrq",   
    password:"rwrv232",   //用户密码的MD5    
}

服务器返回：
{
	"cmdtype":"httpresp",
	"httpresp":"set-pwd",
	"result":"OK"
	"result-data":""
}


6.用户添加设备
通道：http
请求接口：http://serverid/service
请求类型：post
请求参数：
{
	"cmdtype":"httpreq",
	httpreq:"add-dev",
    password:"rwrv232",  //用户密码的MD5
    userid:22,
    devid:"22dev2",   
}

服务器返回：
{
	"cmdtype":"httpresp",
	"httpresp":"add-dev",
	"result":"OK"
	"result-data":""
}


7.取得游戏列表
通道：http
请求接口：http://serverid/service
请求类型：post
请求参数：
{
	"cmdtype":"httpreq",
	httpreq:"get-games", 
}

服务器返回：
{
	"cmdtype":"httpresp",
	"httpresp":"get-games",
	"result":"OK",
	"result-data":"games",
	"games":[{"gameid":gameid,
	          "game_name":"gamename",
	          "game_type": "M|P", //游戏类型：M：麻将；P：扑克
	          “min_players":3, //最少玩家数
	          “max_players":num,  //最多玩家数
	          “server_ip”: “192.168.1.24”， //游戏服务器IP
	          “server_port":3993, // 服务器端口
	          “region": “beijing" //所在地区
	         },
	         {
	          "gameid":gameid,
	           ...
	         }]
}

示例：
{ cmdtype: 'httpresp',
  httpresp: 'get-games',
  result: 'OK',
  'result-data': 'games',
  games: 
   [ { gameid: 111,
       game-name: '拐三角',
       game-type: 'M',
       min-players: 3,
       max-players: '3',
       server-ip: '127.0.0.1',
       server-port: 9229,
       region: 'da tong' },
     { gameid: 222,
       game-name: 'za jin hua',
       game-type: 'P',
       min-players: 3,
       max-players: '7',
       server-ip: '127.0.0.1',
       server-port: 9229,
       region: 'da tong' } ] }

 8. 创建房间
 请求参数
 {
   cmdtype:"httpreq",
    httpreq:"new-room",
    userid:22,
    gameid:111,
    "same-ip-exclude":1,   //IP防作弊
    "near-gps-exclude":0,  //GPS防作弊
    “round-num”:8,         //牌局数
    “fee-stuff-id:11,      //房费使用的物品ID
    “fee-amount-per-player”:1, //每个入座（加入游戏）的玩家需支付的房费的物品数量
    “fee-creator-pay-all”:0,    //1，房主支付所有房费，0，每个玩家平均支付房费
    “stake-stuff-id”:11,        //赌注的物品ID
    “stake-base-score”:5        //牌局的底分
 }

 服务器返回：
 { 
 	cmdtype: 'httpresp',
  	httpresp: 'new-room',
  	result: 'OK',
  	'result-data': 'room',
  	room: {
  			room_num: 12345678    //房间号，8位数字
  		  }

 }

二、进入游戏

###注册玩家
通道：socket

请求参数：
{
	cmdtype:"sockreq",
	sockreq:"reg-player",
	userid: 1111,            //玩家的id
	clientid:"00001",  //购买API服务的机构id
	token:{ 
			clientid:"00001",  //购买API服务的机构id 
			salt:"123232",
			expire:"2019-04-25 10:00:00",
			signature: "signature of salt", 
		}
 }

 服务器返回：
{
	"cmdtype":"sockresp",
	"sockresp":"reg-player",
	"result":"OK"，
	"result-data":"games"
}
如果玩家通过验证，注册成功，则相同socket channel的后续请求是有效的，后续请求的有效性通过socket channel来区分

###创建房间
通道：socket

请求参数：
{
	cmdtype:"sockreq",
	sockreq:"new-room",
	userid: 1111,     //玩家id
	gameid:111,       
	clientid: 111,    //机构id
	"auto-enter":1,                          //房间创建完成后是否自动进入房间，1: 进入； 0：不进入
	"max-players": 8,                        //房间可容纳的玩家数，此数字应该 > 游戏的最小玩家数
	"seconds-waiting": 10,     				 //达到最小玩家数后，等待开局的秒数
	“round-num”:8,         
    “fee-stuff-id":11,
    “fee-stuff-name":"diamond",	
    “fee-amount-per-player”:1, 
    “fee-creator-pay-all”:0,   
    “stake-stuff-id”:11,
	“stake-stuff-name”:“coin”,  	
    “stake-base-score”:5 
 }

服务器返回：
 { 
 	cmdtype: 'sockresp',
  	sockresp: 'new-room',
  	result: 'OK',
  	'result-data': 'roomid',
  	roomid: 12345678    //房间号，8位数字
 }

### 进入房间
通道：socket

请求参数：
{
	"cmdtype":"sockreq",
	"sockreq":"enter-room",
	"userid",123456,
	"clientid":111,
	“gameid":12,
	"roomid",122424，//roomid为0，-1，或空时，为进入游戏大厅
}
服务器返回：
{
	"cmdtype":"sockresp",
	"sockresp":"enter-room",
	"result":"OK"，
	"result-data":"room"，
	"room":{       //room 的属性
		"gameid": 111, 
		”roomid": "12",
		"players": [{"userid": 111, "seated": 1}, {"userid": 222, "seated": 2}, {"userid": 333, "seated": 0}], //在房间的玩家列表
		“seats":[1，2，3，4], //座位的编号列表，如果此项为空，游戏没有座位编号，任何玩家可坐任何座位
	},  
}
说明：
players 的示例：
"players": [{"userid": 111, "seated": 1}, {"userid": 222, "seated": 2}, {"userid": 333, "seated": 0}]

用户可成功进入房间，result 为“OK", ”room" 中包含了房间的有关信息
不可进入房间：result 为“error”， errmsg：错误原因，可能值：用户未登录，房间不存在,房间已满人

### 离开房间
通道：socket
请求参数：
{
	"cmdtype":"sockreq",
	"httpreq":"leave-room",
	"userid",123456,
	"roomid",122424
}
服务器返回：
{
	"cmdtype":"sockresp",
	"httpresp":"leave-room",
	"result":"OK"，
	"result-data":""， 
}


### 进入游戏(入座)
通道：socket
请求参数：
{
	"cmdtype":"sockreq",
	"sockreq":"join-game"
	"userid":123456,
	"roomid":123333,  //roomid为0，-1，或空时，为进入游戏大厅
	"gameid":123432,
	"seadid":1,        //座位的编号，对于没有座位编号的游戏，此项为空或0，-1，对于有座位编号的游戏，如果缺乏此参数，默认值为1
}
服务器返回：
{
	"cmdtype":"sockresp"
	"sockresp":"join-game",
	"result":"OK"
	"result-data":“”，
}

### 离开游戏
通道：socket
请求参数：
{
	"cmdtype":"sockreq",
	"sockreq":"leave-game"
	"userid":123456,
	"roomid":123333,  
	"gameid":123432
}
服务器返回：
{
	"cmdtype":"sockresp"
	"sockresp":"leave-game",
	"result":"OK"
	"result-data":“”，
}

### 取得玩家手里的活动牌
通道：socket
请求参数：
{
	"cmdtype":"sockreq",
	"sockreq":"get-cards"
	"userid":123456,
	"roomid":123333,  
	"gameid":123432
}
服务器返回：
{
	"cmdtype":"sockresp"
	"sockresp":"get-cards",
	"result":"OK"
	"cards":[]，
}



4.服务器推送：
4.1当前玩家入场情况：
推送信息：
{
	"cmdtype":"sockpush",
	"sockpush":"game-players",
	"players": [{"userid": 111, 
				"seated":1, //座位编号
				}, 
				{"userid": 222
				“seated":0, //0 表示未入座； -1，表示无座位编号
				}, {"userid": 333}] //玩家按照入场顺序排序
}
说明：
players 是一个列表，其中的玩家是按照入场的顺序排列的

示例：
{
	"cmdtype": "sockpush",
 	"sockpush": "game-players", 
 	"players": [{"userid": 111,"seated":0}, {"userid": 222,"seated":1}, {"userid": 333,"seated":1}]
}

4.2组局成功，发牌
推送参数：
{
	"cmdtype":"sockpush",
	"sockpush":"deal-cards"   
	"cards":[11，12，15，18,13] //cards是按照随机算法产生的牌点数，点数按照产生的先后顺序排列，是个无序的列表
}
说明：
牌点对应关系：
麻将：
11 -- 19：一万 -- 九万
21 -- 29：幺鸡 -- 九索
31 -- 39：一筒 -- 九筒
41，43，45，47 ：东风，西风，南风，北风
51，53，55： 中，发，白

扑克：



4.2确定庄家
推送参数：
{
	"cmdtype":"sockpush",
	"sockpush":"new-banker",
	"userid":122443
}
说明：
此userid为庄家玩家的id，客户端可使用此ID向web服务器查询用户信息。

4.3 玩家操作命令列表
推送参数：
{
	"cmdtype":"sockpush",
	"sockpush":"cmd-opts",
	"cmd-opts":[
		{	"cmd":"cmd1", 
			"cmd-param":[命令参数1，参数2，...] //参数个数为0 --- 多个
		},
		{	"cmd":"cmd2",
			"cmd-param":[命令参数1，参数2，...]
		}
	],
	"resp-timeout":30 //用户响应超时时间，单位：秒，值为-1时为没有超时，一直等待用户响应
	"def-cmd":{"cmd":"命令文本串，或命令码", "cmd-param":"命令允许的参数"},  
        
}

说明：cmd-opts:包含1个或多个命令项，cmd1, cmd2家命令的文本串或命令码，cmd-param是服务器接受的此命令的参数。
def-cmd 超时后服务器默认执行的命令，其必须是cmd-opts中的一项。

示例：
{
	"cmdtype": "sockpush", 
	"sockpush": "cmd-opts", 
	"cmd-opts": [
			{"cmd": "peng", "cmd-param": [14]}, 
			{"cmd": "guo", "cmd-param": []}
		    ], 
	"resp-timeout": -1, 
	"def-cmd": {"cmd": "guo", "cmd-param": []}
}

4.4. 发牌／摸牌，服务器向玩家手里发牌(同4.2)
推送参数：
{
	"cmdtype":"sockpush",
	"sockpush":"deal-cards",
	"cards":[11，12，15，18,13],
}

4.5 广播玩家的出牌信息
推送参数：
{
	"cmdtype":"sockpush",
	"sockpush":"played-cards",
	"cards":[11,12],  //此为一个列表，即使只有一张牌时，也是一个列表，形如：[13]
	"player-state":"normal|offline|robot-play" //玩家状态，normal:正常，offline：离线，robot-play:机器人托管，normal与offline是互斥出现的，robot-play可与normal或offline组合出现，中间以竖线“|”分隔。
	"userid":11234.  #出牌玩家的userid
}
示例：
{"cmdtype": "sockpush", 
"sockpush": "played-cards", 
"userid": 111, 
"cards": [21], 
"player-state": "normal"}

4.6.一局游戏结束，广播胜负各方
推送参数：
{
	"cmdtype":"sockpush",
	"sockpush":"game-result",
	"winners":[{"userid":1224, "score":12},]
	"losers":[{"userid":122,"score":12}]
}
说明：
winners和losers可有多个，score > 0 赢的分数，score < 0 输的分数

4.7 一局（轮）游戏结束，广播各玩家累积的分数
推送参数：
{
	"cmdtype":"sockpush",
	"sockpush":"scores",
	"scores":[{"userid":1224, "score":12},{"userid":1223, "score":-12},]
}
说明：
score > 0 赢的分数，score < 0 输的分数

4.8 广播玩家的操作(不包括玩家的出牌信息，广播玩家出牌，使用接口：played-cards)
推送参数：
{
	"cmdtype":"sockpush",
	"sockpush":"exed-cmd",
	"exed-cmd":"hu"
	"cmd-param":[]
    "userid":123, #执行操作的用户ID
}

4.9 广播游戏的状态
推送参数：
{
	"cmdtype":"sockpush",
	"sockpush":"game-status",
	"game-status":""
	"state-data":"1". #state-data作为扩展使用，预留
}

4.10 向玩家推送当前牌的状态
推送参数：
{
	"cmdtype": "sockpush", 
	"sockpush": "cards-state", 
	"userid": 333, 
	"private-cards-count": -1|数字， //向其他玩家公开的牌张数， -1 ： 牌张数保密；数字：牌张数其他玩家可见
	"active-cards": [14, 37, 36, 21, 27, 24, 23, 16, 36, 38, 17, 25, 34, 15], //列表，每个数字对应一张牌
	"frozen-cards": [13,13,13], //列表，每个元素对应一张牌，
	"shown-cards-groups": [[13,13,13],[11,12,13]] //向其他玩家亮明的牌的分组，每个分组可以包括1到多张牌
}

示例
{
	"cmdtype": "sockpush", 
	"sockpush": "cards-state", 
	"userid": 333, 
	"active-cards": [14, 37, 36, 21, 27, 24, 23, 16, 36, 38, 17, 25, 34, 15], 
	"frozen-cards": [13,13,13], 
	"shown-cards-groups": [[13,13,13],[11,12,13]] 
}

4.11 向玩家推送当前等待的玩家
推送参数：
{
	"cmdtype": "sockpush", 
	"sockpush": "pending-player", 
	"userid": 333
	
}

示例
{
	"cmdtype": "sockpush", 
	"sockpush": "pending-player", 
	"userid": 333
}

5.玩家发送
5.1出牌
请求参数：
{
	"cmdtype":"sockreq",
	"sockreq":"play-cards",
	"userid":124242,
	"roomid":123,
	"gameid":123,
	"cards": ['s1'],
}

5.2玩家响应
请求参数：
{
	"cmdtype":"sockreq",
	"sockreq":"exe-cmd",  //执行命令
	"userid":124122,
	"gameid":234,
	"roomid",123,
	"cmd":"peng", //此命令来自服务器推送的命令列表
	"cmd-param":[] //命令数据，预留 当cmd为hu, peng, gang,时cmd-data须为服务器push的牌点数
}

5.3玩家断网重连(无需调用特定接口，每个sockreq 的API都有断网重连的能力)

5.4 玩家设置机器人托管
请求参数：
{
	"cmdtype":"sockreq",
	"sockreq":"robot-play",
	"robot-play":"yes|no",
	"userid":123,
    "Roomid":123,
    "gameid":123,
}
socket服务器返回：
{
	"cmdtype":"sockresp",
	"sockresp":"robot-play",
	"result":"OK",
	"errmsg":"",
}

说明：执行成功：result:OK, 执行失败：result: ERROR, errmsg为失败原因 
