<?xml version="1.0" encoding="UTF-8"?>
<!--gtype:M, mahong; P: Poker
-->
<rule name="shengji" ruleid="shengji001" gtype="P" text="shengji001">

    <!--
      sets:牌副数：默认值：1
    -->
    <scene>
        <attrs>
            <attr name="defenders" value_type="players" value="none"/>
            <attr name="attacters" value_type="players" value="none"/>
             <!--庄牌点数-->
            <attr name="bank_cfigure" value_type="int" value="2"/>
            <attr name="init_drawer" value_type="player" value="random"/>
        </attrs>
    </scene>

    <cards sets="1">
        <!--去牌
        valid: 节点是否生效，true：生效, 默认值；false: 无效-->
        <excludes valid="false">
            <!--
            ctype:s|h|d|c|j
                  *: 所有类型,默认值，也即，如果card的属性中不包括ctype属性时，ctype取默认值*,所有类型
                  -: 未指定
            cfigure: 1 - 13, 21,22
                  *：所有数字，默认值，也即，如果card的属性中不包括cfigure属性时，cfigure取默认值*，不限数字
                  -: 未指定

            -->
            <card ctype="-" cfigure="-"/>
            <card ctype="*" cfigure="1"/>
            <card ctype="h" cfigure="2"/>
        </excludes>

        <!--底牌
            count: 留牌张数
            public_shown: 底牌是否对其他玩家可见：true: 可见；false: 不可见
        -->
        <kitty valid="true" count="6" public_shown="false"/>

        <!--分数牌-->
        <score_cards valid="true">
            <!--
               card 说明 同excludes
            -->
            <card ctype="*" cfigure="5" score="5"/>
            <card ctype="*" cgigure="10" score="10"/>
            <card ctype="*" cfigure="13" score="10"/>
        </score_cards>

        <!--牌型，如有对同一牌型不同的配置，后面的覆盖前面的
           leading 是否可作为起始牌，默认为true, 可以由一圈的起始打牌人打出, false,只能用于跟牌
           由于牌的power由牌的组合方式确定，而牌在打出后组合方式才确定，所以，牌的power在牌打出后，由服务器计算玩家出牌的power.
        -->
        <patterns>
            <!--
            <vars>
              <var name="card" value="@played_card"/>
              <var name="cards" value="@played_cards"/>
            </vars>
            -->
            <!--单牌-->
            <single ctype="*" cfigure="1" power="14"/>
            <single ctype="*" cfigure="2" power="2" />
            <single ctype="*" cfigure="3" power="3" />
            <single ctype="*" cfigure="4" power="4" />
            <single ctype="*" cfigure="5" power="5" />
            <single ctype="*" cfigure="6" power="6" />
            <single ctype="*" cfigure="7" power="7" />
            <single ctype="*" cfigure="8" power="8" />
            <single ctype="*" cfigure="9" power="9" />
            <single ctype="*" cfigure="10" power="10" />
            <single ctype="*" cfigure="11" power="11" />
            <single ctype="*" cfigure="12" power="12" />
            <single ctype="*" cfigure="13" power="13" />
            <single ctype="j" cfigure="21" power="50"/>
            <single ctype="j" cfigure="22" power="51"/>

            <!--主牌-->
            <single>
                <!--主牌花色牌, power range="21-33"-->
                <let property="@card.power" value=":(cfigure_of(@card) + 20)">
                    <when value_of=":(ctype_of(@card))" ret_as="@round.bank_ctype"/>
                </let>

                <!--主牌数字牌-->
                <let property="@card.power" value="35" >
                    <when value_of=":(cfigure_of(@card))" ret_as="@round.bank_cfigure"/>
                </let>

                <!--正主牌-->
                <let property="@card.power" value="36">
                    <!--
                      多条件判断，test_type: and 与运算，缺省值
                                            or  或运算
                    -->
                    <when op="and">
                        <case value_of=":(ctype_of(@card))" ret_as="@round.bank_ctype"/>
                        <case value_of=":(cfigure_of(@card))" ret_as="@round.bank_cfigure"/>
                    </when>
                </let>
            </single>

            <!--四张 range="6-18"-->
            <quad name="zha" power=":(max_cfigure_of(@cards) + 5)"/>

            <!--四张的跟牌-->
            <comp name="zha_follow" leading="false">

                <!--非枪毙牌，最小-->
                <let property="@cards.power" value="0">
                    <when op="or">
                        <case value_of=":(ctype_count_of(@cards))" ret_gt="1"/>
                        <cases op="and">
                            <case value_of=":(ctype_count_of(@cards))" ret_is="1"/>
                            <case value_of=":(ctype_of(@cards[0]))" ret_not_as="@round.bank_ctype"/>
                        </cases>
                    </when>
                </let>

                <!--枪毙牌，大过四张牌, 前提是手中已没有其他花牌-->
                <let property="@cards.power" value=":(power_of(max_cfigure_of(@cards)))">
                    <when op="and">
                        <case value_of=":(ctype_count_of(@cards))" ret_is="1"/>
                        <case value_of=":(ctype_of(@cards[0]))" ret_as="@round.bank_ctype"/>
                    </when>
                </let>
            </comp>

            <!--甩牌, 同色，多张-->
            <same_ctype name="shuai" power=":(power_of(max_cfigure_of(@cards)))">
                <let property="@cards.leading" value="true">
                    <when>
                        <!--不能有主牌数字-->
                        <case value_of=":(is_cards_contain_cfigure(@cards, @round.bank_cfigure))" ret_not_is="true"/>
                        <!--都是大牌-->
                        <case value_of=":(min_cfigure_of(@cards))" ret_gt_as=":(var cs1; var cs2; cs1 = cards_in_other_players_hand(@cards); cs2 = cards_of_ctype(@cs1, ctype_of(@cards[0])); return max_cfigure_of(@cs2);)"/>
                    </when>
                </let>
            </same_ctype>

            <!--甩牌跟牌-->
            <comp name="shuai_follow" leading="false">
                <!--非枪毙牌，最小-->
                <let property="@cards.power" value="0">
                    <when op="or">
                        <case value_of=":(ctype_count_of(@cards))" ret_gt="1"></case>
                        <cases op="and">
                            <case value_of=":(ctype_count_of(@cards))" ret_is="1"></case>
                            <case value_of=":(ctype_of(@cards[0]))" ret_not_as="@round.bank_ctype"/>
                        </cases>
                    </when>
                </let>

                <!--枪毙牌，大过四张牌, 前提是手中已没有其他花牌-->
                <let property="@cards.power" value=":(power_of(max_cfigure_of(@cards)))">
                    <when op="and">
                        <case value_of=":(ctype_count_of(@cards))" ret_is="1"></case>
                        <case value_of=":(ctype_of(@cards[0]))" ret_as="@round.bank_ctype"/>
                    </when>
                </let>
            </comp>

        </patterns>
    </cards>

    <!--跟牌规则：
    是否跟牌：
    1. 必须出牌
      牌型要求
        无相同牌型的处理
        与起牌人的牌型相同
        与上家的牌型相同
      牌张要求
    2. 大才出牌

    pattern_ref_as="@trick_init_player"
    pattern_ref_as="@prev_cards"
    -->
    <following must_follow="true"
               pattern_ref_as="trick_init_cards">
        <var name="leading" value="@trick_init_cards" value_type="cards"/>


    </following>

    <!--玩家-->
    <players min="4" max="4">
        <attr name="bank_cfigure" value_type="int" value="2"/>
        <attr name="IsMainPlayer" value_type="bool" value="false" />
        <attr name="IsAttacter" value_type="bool" value="false"/>
        <attr name="IsDefender" value_type="bool" value="false"/>
        <attr name="sum_score" value_type="int" value="0"/>
        <attr name="Score" value_type="int" value="0"/>
        <attr name="IsTrickWinner" value_type="bool" value="false"/>
    </players>

    <!--一圈-->
    <trick>
        <!--通常情况下是出最大牌的player-->
        <!-- <winner var_as="trick_winner">
          <find_player player="@trick.max_power_player">
          </find_player>
        </winner> -->
    </trick>
    <!--一局-->
    <round>
        <attrs>
             <!--庄牌点数-->
            <attr name="bank_cfigure" value_type="int" value="2"/>
            <!--庄牌花色-->
            <attr name="bank_ctype" value_type="string" value="none"/>
            <attr name="defenders" value_type="players" value="none"/>
            <attr name="attacters" value_type="players" value="none"/>
            <!--起牌玩家，第一个摸牌的人-->
            <attr name="init_drawer" value_type="player" value="random"/>
            <attr name="kitty" value_type="cards" value="none"/>
        </attrs>
    </round>

    <running>
        <!--for debugging, start-->
        <!--<var name="test_var" value_type="cards" value="list:s1,s2,s3"/>
        <update property="@test_var" value="list:s4,s5,s6"/>
        <update property="@round.bank_cfigure" value=":(#proc_example(none, @test_var))"/>-->
        <!--for debugging, end-->

        <!--for debugging, start-->
        <var name="drawer1" value="@scene.init_drawer" value_type="player"/>
        <act_opts timeout="500" timeout_act="pass" to_player="@drawer1">
                    <act_ref act="jiaozhu" param="list:s2"/>
                    <act_ref act="pass" param="none"/>
        </act_opts>
        <!--for debugging, end-->

        <update property="@round.defenders" value="@scene.defenders"/>
        <update property="@round.attacters" value="@scene.attacters"/>
        <update property="@round.bank_cfigure" value="@scene.bank_cfigure"/>
   
        

        <var name="drawn_card" value="None" value_type="card"></var>
        <var name="drawer" value="@scene.init_drawer" value_type="player"/>

        <!--底牌6张-->
        <draw_cards to_var="@round.kitty" count="6"></draw_cards>
        <loop_until value_of=":(cards_count_not_deal())" ret_gt="0">
            <!--发牌（摸牌，起牌）-->
            <!--每次一张牌-->
            <draw_cards to_var="@drawn_card" count="1"></draw_cards>
            <send_cards player="@drawer" cards="@drawn_card" ></send_cards>

            <!--摸到将牌，可以叫主，前提是还没主-->
            <ift>
                <cases>
                    <case value_of=":(cfigure_of(@drawn_card))" ret_as="@round.bank_cfigure"/>
                    <case value_of="@round.bank_ctype" ret_is="none"/>
                </cases>
                <act_opts timeout="30" timeout_act="pass" to_player="@drawer">
                    <act_ref act="jiaozhu" param="@drawn_card"/>
                    <act_ref act="pass" param="none"/>
                </act_opts>

            </ift>

            <update property="@drawer" value=":(next_player_of(@drawer))"/>
        </loop_until>

        <!--发牌结束,还没有选主-->
        <ift value_of="@round.bank_ctype" ret_is="none">
            <!--开始局，流局-->
            <ift value_of="@scene.defenders" ret_is="none">
               <then>
                    <pub_msg message="liuju" players="@scene.players"></pub_msg>
                    <exitround/>
               </then>
               <else>
                    <!--从底牌中选主-->
                    <proc_ref proc="sel_bank_type_from_kitty"/>
               </else>
            </ift>
        </ift>

        <!--底牌归于主打-->
        <deal_cards count="6" player=":(find_player(IsMainPlayer:true))"></deal_cards>

        <!--等待主打扣牌-->
        <act_opts timeout="30" timeout_act="force_koupai" to_player=":(find_player(IsMainPlayer:true))">
                <act_ref act="koupai"/>
                <act_ref act="force_koupai"/>
        </act_opts>

        <var name="trick_init_player" value_type="player" value=":(find_player(IsMainPlayer:true))"/>
        <var name="valid_leading_cards" value_type="bool" value="false"/>
        <!--进入打牌，从主打开始, 一局结束，主打手里没牌-->
        <loop_until value_of=":(cards_count_in_player_hand(@trick_init_player))" ret_gt="0">
            <loop_until value_of="@valid_leading_cards" ret_is="false">
                <act_opts timeout="30" timeout_act="force_chupai" to_player="@trick_init_player">
                        <act_ref act="playcard"/>
                        <act_ref act="force_chupai"/>
                </act_opts>
                
                <ift value_of=":(is_valid_leading_cards(@trick_init_player.played_cards))" ret_is="true">
                    <update property="@valid_leading_cards" value="true"/>
                </ift>
            </loop_until>

            <var name="sorder" value_type="int" value="1"/>
            <loop_until value_of="@sorder" ret_is="3">
                <var name="valid_following_cards" value_type="bool" value="false"/>
                <var name="follower" value_type="player" value=":(find_player(seatid:(@trick_init_player.seatid + @sorder)))"/>
                <loop_until value_of="@valid_following_cards" ret_is="false">

                    <act_opts timeout="30" timeout_act="force_chupai" to_player="@follower">
                            <act_ref act="playcard"/>
                            <act_ref act="force_chupai"/>
                    </act_opts>

                    <ift value_of=":(is_valid_following_cards(@follower.played_cards))" ret_is="true">
                        <update property="@valid_following_cards" value="true"/>
                    </ift>
                </loop_until>
            </loop_until>

            <update property="@trick_init_player" value="@trick.winner"/>
            <proc_ref proc="@trick.end"/>

        </loop_until>

        <!--出牌结束，确定一局输赢玩家-->
        <proc_ref proc="@round.end"/>

        <!--广播一局胜负-->
        <!--<publish_round_winners_losers/>-->

        <!--广播累积胜负-->
        <!--<publish_total_scores/>-->
    </running>

    <!--玩家操作命令列表-->
    <procs>
        <!--没有选主，从底牌中选出-->
        <proc name="sel_bank_type_from_kitty">
            <ift value_of=":(is_cards_contain_ctype(@round.kitty,'j'))" ret_is="true">
            <!--有王牌，主牌为王和四个级牌-->
                <then>
                    <update property="@round.bank_ctype" value="j"/>
                </then>
                <else>
                    <ift value_of=":(is_cards_contain_cfigure(@round.kitty, @round.bank_cfigure))" ret_is="true">
                        <then>
                            <!--有级数牌，从级数牌里选-->
                            <update property="@round.bank_ctype" value=":(var c; var t; c=card_of_cfigure(@round.kitty, @round.bank_cfigure); t=ctype_of(@c); return @t)" />
                        </then>
                        <else>
                            <!--无王牌，无级牌，选点数最大牌-->
                            <update property="@round.bank_ctype" value=":(var c; var t; c=max_cfigure_of(@round.kitty); t=ctype_of(@c); return @t)" />
                        </else>
                    </ift>
                </else>
            </ift>
        </proc>
        <proc name="round_end">
            <lets>
                <!--进攻方分数<40，防守方赢 -->
                <let property="@round.winners" value=":(find_players(IsDefender:true))"/>
                <let property="@round.losers" value=":(find_players(IsDefender:false))"/>
                <when value_of="@round.attacters[0].Score" ret_lt="40"/>
            </lets>
            <lets>
                <!--进攻方分数>=40，进攻方赢 -->
                <let property="@round.winners" value=":(find_players(IsAttacter:true))"/>
                <let property="@round.losers" value=":(find_players(IsAttacter:false))"/>
                <when value_of="@round.attacters[0].Score" ret_not_lt="40"/>
            </lets>

            <ift value_of="@round.winners[0].IsDefender" ret_is="true">
                <vars>
                    <var name="p1" value=":(find_player(IsDefender:true ## IsMainPlayer:true))"/>
                    <var name="p2" value=":(find_player(IsDefender:true ## IsMainPlayer:false))"/>
                    <var name="seatid" value=":(var p; p = find_player(IsDefender:true ## IsMainPlayer:true); return seatid_of_player(@p))"/>
                </vars>

                <!--防守方赢 -->
                <then>
                    <!--交换主打人-->
                    <update targets="@p1" property="IsMainPlayer" value="false"/>
                    <update targets="@p2" property="IsMainPlayer" value="true"/>

                    <ift value_of="@round.losers[0].Score" ret_is="0">
                        <then>
                            <!--进攻方分数为0，防守方升2级-->
                            <update targets="@round.winners" property="@bank_figure" op="add" value="2"/>
                        </then>
                        <else>
                            <!--进攻方分数>0，防守方升1级-->
                            <then>
                                <update targets="@round.winners" property="@bank_figure" op="add" value="1"/>
                            </then>
                        </else>
                    </ift>

                    <update property="@scene.bank_cfigure" value="@round.winners[0].bank_cfigure"/>
                    <update property="@round.init_drawer" value="@p2"/>

                </then>
                <!--进攻方赢 -->
                <else>
                    <!--攻守角色互换-->
                    <then>
                        <update property="IsDefender" targets="@round.winners" value="true"/>
                        <update property="IsAttacter" targets="@round.winners" value="false"/>
                       
                        
                        <update property="IsDefender" targets="@round.losers" value="false"/>
                        <update property="IsAttacter" targets="@round.losers" value="true"/>
                        <update property="IsMainPlayer" targets="@round.losers" value="false"/>
                        
                        <update property="IsMainPlayer" targets=":(find_player(seatid:(@seatid + 1)))" value="true"/>
                        
                    </then>
                    <case value_of="@round.winners[0].Score" ret_not_lt="80">
                        <then>
                            <!--进攻方分数>=80，进攻方升2级-->
                            <update targets="@round.winners" property="@bank_cfigure" op="add" value="2"/>
                        </then>
                        <else>
                            <!--进攻方分数<80，进攻方升1级-->
                            <then>
                                <update targets="@round.winners" property="@bank_cfigure" op="add" value="1"/>
                            </then>
                        </else>
                    </case>
                </else>
            </ift>

            <update property="@scene.defenders" value="@round.winners"/>
            <update property="@scene.attacters" value="@round.losers"/>
        </proc>
        <proc name="trick_end">
            <!--进攻方赢，得到分数牌, cards，一圈打出的牌-->
             <ift>
                <cases op="and">
                    <case value_of=":(is_cards_contain_cfigure(@trick.played_cards,@score_cards))" ret_is="true"/>
                    <case value_of="@trick_winner.IsAttacter" ret_is="true"/>
                </cases>
                <then>
                    <update targets=":(find_players(IsAttacter:true))" property="score" op="add" value="card_score"/>
                </then>
            </ift>


            <!-- 最后圈输赢测试 如果attacter win, attacter将获得底牌的分数 -->
            <ift>
                <cases>
                    <case value_of=":(player_cards_count_in_hand(@trick.winner))" ret_is="0"/>
                    <case value_of="@trick_winner.IsAttacter" ret_is="true"/>
                </cases>
                <then>
                    <update targets=":(find_players(IsAttacter:true))" property="score" op="add" value=":(sum_score(@kitty_cards))"/>
                </then>
            </ift>
        </proc>
        <proc name="follow_test">
            <ift>
                <cases op="and">
                    <case value_of=":(cpattern_type_of(@leading))" ret_is="@single"/>
                    <case value_of=":(is_void(@round.cur_player, ctype_of(@leading[0])))" ret_is="true"/>
                </cases>
                <then>
                    <!-- 绝牌 -->
                    <card ctype="*"></card>
                </then>
                <!-- 没有绝牌， 须出同花色牌 -->
                <else>
                    <then>
                        <card ctype=":(ctype_of(@trick_init_cards[0])"></card>
                    </then>
                </else>
            </ift>

            <ift>
                <cases>
                    <case value_of=":(cpattern_name_of(@leading))" ret_is="zha"/>
                    <case value_of=":(is_player_has_named_pattern(@cur_player, zha))" ret_is="true"/>
                </cases>
                <then>
                    <cards cards=":(cpattern_name_of(@cards))" ret_is="zha"/>
                </then>
                <else>
                    <then>
                        <!--ctype:count-->
                        <cards cards="c:1,d:1,s:1,h:1" void_ctype="*">
                        </cards>
                    </then>
                </else>
            </ift>

            <ift>
                <case value_of=":(cpattern_name_of(@leading))" ret_is="shuai"/>
                <cards cards=":(get_cards_of_ctype(@cards[0], count_of(@cards), @any_ctype))"/>
            </ift>
        </proc>
        <proc name="proc_example" params="#player,#cards">
            <var name="#f_val" value_type="int" value="0"/>
            <ift value_of=":(element_at(@#cards, 0))" ret_not_is="str:s1">
                <update property="@#f_val" value="4"/>
            </ift>
            <ret value="@#f_val"></ret>
        </proc>
    </procs>

    <!--对于action，其内部可访问两个隐含的参数：
    @cmd_player: 执行此action的player
    @cmd_param:执行action传入的参数
    -->
    <actions>
        <!--叫主-->
        <action name="jiaozhu">
            <update property="@round.bank_ctype" value=":(ctype_of(element_at(@cmd_param, 0)))"/>
        </action>

        <action name="liuju">
            <pub_msg players="@round.players" message="liu ju"/>
        </action>

        <action name="pass" text="pass">

        </action>>

        <action name="koupai" text="koupai">
            <send_cards_to_table cards="@selected_cards"/>
            <delay seconds="2"/>
            <pub_msg players="@round.players" msg="kou pai"></pub_msg>
        </action>

        <action name="chupai" text="chupai">
            <playcards cards="@selected_cards"/>
        </action>

        <action name="force_chupai">
            <playcards cards=":(select_random_cards(count=1))"/>
        </action>

        <action name="force_koupai" text="none" >
            <send_cards_to_table cards=":(select_random_cards(count=6))"/>
            <delay seconds="3"></delay>
            <pub_msg players="@round.players" msg="kou pai" ></pub_msg>
        </action>
    </actions>
</rule>