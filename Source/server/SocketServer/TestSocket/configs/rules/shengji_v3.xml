<?xml version="1.0" encoding="UTF-8"?>
<!--gtype:M, mahong; P: Poker
-->
<rule name="shengji" ruleid="111" gtype="P" text="shengji001">

    <!--
      sets:牌副数：默认值：1
    -->
    <scene>
        <attrs>
            <attr name="defenders" value_type="players" value="none"/>
            <attr name="attacters" value_type="players" value="none"/>
             <!--庄牌点数-->
            <attr name="bank_cfigure" value_type="int" value="2"/>
            <attr name="init_drawer" value_type="player" value="random"/>
        </attrs>
    </scene>

    <cards sets="1">
        <!--去牌
        valid: 节点是否生效，true：生效, 默认值；false: 无效-->
        <excludes valid="false">
            <!--
            ctype:s|h|d|c|j
                  *: 所有类型,默认值，也即，如果card的属性中不包括ctype属性时，ctype取默认值*,所有类型
                  -: 未指定
            cfigure: 1 - 13, 21,22
                  *：所有数字，默认值，也即，如果card的属性中不包括cfigure属性时，cfigure取默认值*，不限数字
                  -: 未指定

            -->
            <card ctype="-" cfigure="-"/>
            <card ctype="*" cfigure="1"/>
            <card ctype="h" cfigure="2"/>
        </excludes>

        <!--底牌
            count: 留牌张数
            public_shown: 底牌是否对其他玩家可见：true: 可见；false: 不可见
        -->
        <kitty valid="true" count="6" public_shown="false"/>

        <!--分数牌-->
        <score_cards valid="true">
            <!--
               card 说明 同excludes
            -->
            <card ctype="*" cfigure="5" score="5"/>
            <card ctype="*" cgigure="10" score="10"/>
            <card ctype="*" cfigure="13" score="10"/>
        </score_cards>

        <!--牌型，如有对同一牌型不同的配置，后面的覆盖前面的
           leading 是否可作为起始牌，默认为true, 可以由一圈的起始打牌人打出, false,只能用于跟牌
           由于牌的power由牌的组合方式确定，而牌在打出后组合方式才确定，所以，牌的power在牌打出后，由服务器计算玩家出牌的power.
        -->
        <patterns>
            <!--
            <vars>
              <var name="card" value="@played_card"/>
              <var name="cards" value="@played_cards"/>
            </vars>
            -->
            <!--单牌-->
            <single ctype="*" cfigure="1" power="14"/>
            <single ctype="*" cfigure="2" power="2" />
            <single ctype="*" cfigure="3" power="3" />
            <single ctype="*" cfigure="4" power="4" />
            <single ctype="*" cfigure="5" power="5" />
            <single ctype="*" cfigure="6" power="6" />
            <single ctype="*" cfigure="7" power="7" />
            <single ctype="*" cfigure="8" power="8" />
            <single ctype="*" cfigure="9" power="9" />
            <single ctype="*" cfigure="10" power="10" />
            <single ctype="*" cfigure="11" power="11" />
            <single ctype="*" cfigure="12" power="12" />
            <single ctype="*" cfigure="13" power="13" />
            <single ctype="j" cfigure="21" power="50"/>
            <single ctype="j" cfigure="22" power="51"/>

            <!--主牌-->
            <single>
                <!--主牌花色牌, power range="21-33"-->
                <let property="@card.power" value=":(cfigure_of(@card) + 20)">
                    <when value_of=":(ctype_of(@card))" ret_as="@round.bank_ctype"/>
                </let>

                <!--主牌数字牌-->
                <let property="@card.power" value="35" >
                    <when value_of=":(cfigure_of(@card))" ret_as="@round.bank_cfigure"/>
                </let>

                <!--正主牌-->
                <let property="@card.power" value="36">
                    <!--
                      多条件判断，test_type: and 与运算，缺省值
                                            or  或运算
                    -->
                    <when op="and">
                        <case value_of=":(ctype_of(@card))" ret_as="@round.bank_ctype"/>
                        <case value_of=":(cfigure_of(@card))" ret_as="@round.bank_cfigure"/>
                    </when>
                </let>
            </single>

            <!--四张 range="6-18"-->
            <quad name="zha" power=":(max_cfigure_of(@cards) + 5)"/>

            <!--四张的跟牌-->
            <comp name="zha_follow" leading="false">

                <!--非枪毙牌，最小-->
                <let property="@cards.power" value="0">
                    <when op="or">
                        <case value_of=":(ctype_count_of(@cards))" ret_gt="1"/>
                        <cases op="and">
                            <case value_of=":(ctype_count_of(@cards))" ret_is="1"/>
                            <case value_of=":(ctype_of(@cards[0]))" ret_not_as="@round.bank_ctype"/>
                        </cases>
                    </when>
                </let>

                <!--枪毙牌，大过四张牌, 前提是手中已没有其他花牌-->
                <let property="@cards.power" value=":(power_of(max_cfigure_of(@cards)))">
                    <when op="and">
                        <case value_of=":(ctype_count_of(@cards))" ret_is="1"/>
                        <case value_of=":(ctype_of(@cards[0]))" ret_as="@round.bank_ctype"/>
                    </when>
                </let>
            </comp>

            <!--甩牌, 同色，多张-->
            <same_ctype name="shuai" power=":(power_of(max_cfigure_of(@cards)))">
                <let property="@cards.leading" value="true">
                    <when>
                        <!--不能有主牌数字-->
                        <case value_of=":(is_cards_contain_cfigure(@cards, @round.bank_cfigure))" ret_not_is="true"/>
                        <!--都是大牌-->
                        <case value_of=":(min_cfigure_of(@cards))" ret_gt_as=":(var cs1; var cs2; cs1 = cards_in_other_players_hand(@cards); cs2 = cards_of_ctype(@cs1, ctype_of(@cards[0])); return max_cfigure_of(@cs2);)"/>
                    </when>
                </let>
            </same_ctype>

            <!--甩牌跟牌-->
            <comp name="shuai_follow" leading="false">
                <!--非枪毙牌，最小-->
                <let property="@cards.power" value="0">
                    <when op="or">
                        <case value_of=":(ctype_count_of(@cards))" ret_gt="1"></case>
                        <cases op="and">
                            <case value_of=":(ctype_count_of(@cards))" ret_is="1"></case>
                            <case value_of=":(ctype_of(@cards[0]))" ret_not_as="@round.bank_ctype"/>
                        </cases>
                    </when>
                </let>

                <!--枪毙牌，大过四张牌, 前提是手中已没有其他花牌-->
                <let property="@cards.power" value=":(power_of(max_cfigure_of(@cards)))">
                    <when op="and">
                        <case value_of=":(ctype_count_of(@cards))" ret_is="1"></case>
                        <case value_of=":(ctype_of(@cards[0]))" ret_as="@round.bank_ctype"/>
                    </when>
                </let>
            </comp>

        </patterns>
    </cards>

    <!--玩家-->
    <players min="4" max="4">
        <attr name="bank_cfigure" value_type="int" value="2"/>
        <attr name="IsMainPlayer" value_type="bool" value="false" />
        <attr name="IsAttacter" value_type="bool" value="false" pub_status="true"/>
        <attr name="IsDefender" value_type="bool" value="false" pub_status="true"/>
        <attr name="sum_score" value_type="int" value="0" pub_status="true"/>
        <attr name="Score" value_type="int" value="0" pub_status="true"/>
        <attr name="IsTrickWinner" value_type="bool" value="false"/>
        <attr name="trick_cards" value_type="cards" value="none"/>
        <attr name="trick_power" value_type="int" value="0"/>
        <attr name="trick_score" value_type="int" value="0"/>
    </players>

    <!--一圈-->
    <trick>
        <!--通常情况下是出最大牌的player-->
        <!-- <winner var_as="trick_winner">
          <find_player player="@trick.max_power_player">
          </find_player>
        </winner> -->
    </trick>
    <!--一局-->
    <round>
        <attrs>
             <!--庄牌点数-->
            <attr name="bank_cfigure" value_type="int" value="2" pub_status="true"/>
            <!--庄牌花色-->
            <attr name="bank_ctype" value_type="string" value="none" pub_status="true"/>
            <attr name="defenders" value_type="players" value="none" pub_status="true"/>
            <attr name="attacters" value_type="players" value="none" pub_status="true"/>
            <!--起牌玩家，第一个摸牌的人-->
            <attr name="init_drawer" value_type="player" value="random"/>
            <attr name="kitty" value_type="cards" value="none"/>
            <attr name="koupai" value_type="cards" value="none"/>
            <attr name="trick_leading_player" value_type="player" value="none"/>
            <attr name="trick_leading_cards" value_type="cards" value="none"/>
            <attr name="winners" value_type="players" value="none"/>
            <attr name="losers" value_type="players" value="none"/>
            <attr name="is_trick_valid_leading_cards" value_type="bool" value="false"/>
            <attr name="is_player_valid_cards" value_type="bool" value="false"/>
            <attr name="is_valid_following_cards" value_type="bool" value="false"/>
            <attr name="trick_init_player" value="none" value_type="player"/>
            <attr name="trick_winner" value_type="player" value="none"/>
            <attr name="trick_cards" value_type="cards" value="none"/>
            <attr name="trick_score" value_type="int" value="0"/>
            <attr name="kitty_score" value_type="int" value="0"/>

            <!--values: single, squd, shuai-->
            <attr name="trick_leading_pattern" value_type="str" value="single"/>
        </attrs>
        <!---for debug-->
        <debug ordered_cards="s3,d3,c3,h3,h4,h5,c7,d6,s6,h8,s1 ,h2"></debug>
    </round>


    <!--玩家操作命令列表-->
    <procs>
        <!--没有选主，从底牌中选出-->
        <proc name="sel_bank_type_from_kitty">
            <ift value_of=":(is_cards_contain_ctype(@round.kitty,j))" ret_is="true">
            <!--有王牌，主牌为王和四个级牌-->
                <then>
                    <update property="@round.bank_ctype" value=":(ctype_of(j21))"/>
                </then>
                <else>
                    <ift value_of=":(is_cards_contain_cfigure(@round.kitty, @round.bank_cfigure))" ret_is="true">
                        <then>
                            <!--有级数牌，从级数牌里选-->
                            <update property="@round.bank_ctype" value=":(var c1; var t1; c1=first_card_of_cfigure(@round.kitty, @round.bank_cfigure); t1=ctype_of(@c1); return @t1)" />
                        </then>
                        <else>
                            <!--无王牌，无级牌，选点数最大牌-->
                            <update property="@round.bank_ctype" value=":(var c2; var t2; c2=max_cfigure_of_cards(@round.kitty); t2=ctype_of(@c2); return @t2)" />
                        </else>
                    </ift>
                </else>
            </ift>
        </proc>

        <!--是否为有效的起始出牌-->
        <proc name="is_valid_leading_cards" params="#arg_player, #arg_cards">
            <var name="#p2_valid_leading" value_type="bool" value="false"/>
            <!--单牌，有效-->
            <ift value_of=":(count_of(@#arg_cards))" ret_is="1">
                <update property="@#p2_valid_leading" value="true"></update>
            </ift>

            <ift>
                <!--4色同点-->
                <cases op="and">
                    <!--前提，任需探测-->
                    <case value_of="@#p2_valid_leading" ret_is="false"/>
                    <case value_of=":(count_of(@#arg_cards))" ret_is="4"></case>
                    <case value_of=":(is_cards_same_cfigure(@#arg_cards))" ret_is="true"/>
                    <case value_of=":(ctype_count_of_cards(@#arg_cards))" ret_is="4"/>
                </cases>
                <update property="@#p2_valid_leading" value="true"></update>
            </ift>

            <!--甩牌-->
            <ift>
                <cases op="and">
                    <!--前提，任需探测-->
                    <case value_of="@#p2_valid_leading" ret_is="false"/>
                    <!--同色-->
                    <case value_of=":(is_cards_same_ctype(@#arg_cards))" ret_is="true" />
                    <!--不能是主-->
                    <case value_of=":(ctype_of(element_at(@#arg_cards,0)))" ret_not_as="@round.bank_ctype"/>
                </cases>
                <then>
                    <var name="#p2_ctype" value_type="int" value=":(ctype_of(element_at(@#arg_cards,0)))"/>
                    <var name="#p2_other_cards" value_type="cards" value="none"/>
                    <var name="#p2_sorder" value_type="int" value="1"/>
                    <var name="#p2_next_player" value="none" value_type="player"/>
                    <loop_until step="ivlc-3" value_of="@#p2_sorder" ret_lt="4">
                        <update property="@#p2_next_player" value=":(next_player_of(@#arg_player, @#p2_sorder))"/>
                        <update property="@#p2_other_cards" op="append" value=":(player_cards_of_ctype(@#p2_next_player, @#p2_ctype))"/>
                        <update property="@#p2_sorder" op="add" value="1"/>
                    </loop_until>
                    <!--其他玩家没有大过的牌-->
                    <ift step="ivlc-4" value_of=":(min_cfigure_of_cards(@#arg_cards))" ret_gt_as=":(max_cfigure_of_cards(@#p2_other_cards))">
                        <update property="@#p2_valid_leading" value="true"></update>
                    </ift>
                </then>
            </ift>

            <ret value="@#p2_valid_leading"></ret>
        </proc>

        <proc name="is_valid_following_cards" params="#arg_player,#arg_cards">
            <var name="#ivfc_valid_following" value_type="bool" value="false"/>
            <ift>
                <cases op="or">
                    <case value_of=":(count_of(@#arg_cards))" ret_not_as=":(count_of(@round.trick_leading_cards))"/>
                    <case step="21821" value_of=":(player_has_cards(@#arg_player, @#arg_cards))" ret_is="false"/>
                </cases>

                <then>
                    <update property="@#ivfc_valid_following" value="false"></update>
                </then>
                <else>
                     <ift value_of=":(count_of(@round.trick_leading_cards))" ret_is="1">
                        <!--单牌-->
                        <then>
                            <var name="#want_ctype" value_type="str" value=":(ctype_of(element_at(@round.trick_leading_cards, 0)))"/>
                            <var name="#solo_follow_ctype" value_type="str" value=":(ctype_of(element_at(@#arg_cards, 0)))"/>
                            <ift value_of="@#solo_follow_ctype" ret_as="@#want_ctype">
                                <!--跟牌同色，有效-->
                                <update property="@#ivfc_valid_following" value="true"></update>
                                <!--跟异色牌-->
                                <else>
                                    <ift >
                                        <cases op="and">
                                            <case value_of="@#want_ctype" ret_not_as="@round.bank_ctype"/>
                                            <case value_of=":(cfigure_of(element_at(@round.trick_leading_cards, 0)))" ret_not_as="@round.bank_cfigure"/>
                                        </cases>
                                        <!--起牌为非主-->
                                        <then>
                                            <ift value_of=":(is_player_has_cards_of_ctype(@#arg_player, @#want_ctype))" ret_is="false">
                                                <!--手里没有同色牌，跟牌有效-->
                                                <update property="@#ivfc_valid_following" value="true"></update>

                                                <!--手里有同色牌-->
                                                <else>
                                                    <var name="#ctyped_cards" value_type="cards" value=":(player_cards_of_ctype(@#arg_player,@#want_ctype))"/>
                                                    <ift value_of=":(count_of(@#ctyped_cards))" ret_gt="1">
                                                        <!--同色牌张数大于1，跟牌无效-->
                                                        <update property="@#ivfc_valid_following" value="false"></update>
                                                        <else>
                                                            <ift value_of=":(cfigure_of(element_at(@#ctyped_cards,0)))" ret_as="@round.bank_cfigure">
                                                                <!--唯一同色牌是级牌，跟牌有效-->
                                                                <update property="@#ivfc_valid_following" value="true"></update>
                                                                <!--唯一同色牌不是级牌，跟牌无效-->
                                                                <else>
                                                                    <update property="@#ivfc_valid_following" value="false"></update>
                                                                </else>
                                                            </ift>
                                                        </else>
                                                    </ift>
                                                </else>
                                            </ift>
                                        </then>
                                        <!--起牌为主牌-->
                                        <else>
                                            <ift>
                                                <cases op="or">
                                                    <case value_of=":(count_of(player_cards_of_ctype(@#arg_player, @#want_ctype)))" ret_gt="0"/>
                                                    <case value_of=":(count_of(player_cards_of_ctype(@#arg_player, j)))" ret_gt="0"/>
                                                    <case value_of=":(count_of(player_cards_of_cfigure(@#arg_player, @round.bank_cfigure)))" ret_gt="0"/>
                                                </cases>
                                                <!--手中还有主牌，跟牌无效-->
                                                <update property="@#ivfc_valid_following" value="false"></update>
                                                <else>
                                                    <!--手中还有主牌，跟牌有效-->
                                                    <update property="@#ivfc_valid_following" value="true"></update>
                                                </else>
                                            </ift>
                                        </else>
                                    </ift>
                                </else>
                            </ift>
                        </then>

                         <!--TODO 其它牌型，甩牌，炸牌跟牌判断-->
                         <else></else>
                    </ift>
                </else>
            </ift>
            <ret value="@#ivfc_valid_following"/>
        </proc>

        <proc name="round_end">
            <var name="#pre_one_attacter" step="292158" value_type="player" value=":(find_player(IsAttacter:true))"/>
            <var name="#pre_cur_main_player" value_type="player" value=":(find_player(IsMainPlayer:true))"/>
            <ift step="292300" value_of="@#pre_one_attacter.Score" ret_not_lt="int%40">
                <then>
                    <var name="#pre_next_main_player" value=":(next_player_of(@#pre_cur_main_player, 1))" value_type="player"></var>
                     <!--进攻方分数>40，进攻方赢, 防守方输, 攻守互换，进攻方升一级-->
                    <update property="@round.winners" value=":(find_players(IsAttacter:true))"/>
                    <update property="@round.losers" value=":(find_players(IsDefender:true))"/>
                    <update property="@round.winners.[].IsDefender" value="true"/>
                    <update property="@round.winners.[].IsAttacter" value="false"/>
                    <update property="@round.losers.[].IsAttacter" value="true"/>
                    <update property="@round.losers.[].IsDefender" value="false"/>
                    <update property="@#pre_cur_main_player.IsMainPlayer" value="false"/>
                    <update property="@#pre_next_main_player.IsMainPlayer" value="true"/>
                    <update step="292337" property="@round.winners.[].bank_cfigure" op="add" value="1"/>
                    <ift value_of="@#pre_one_attacter.Score" ret_not_lt="int%80">
                        <!--进攻方分数>80, 升2级-->
                        <update property="@round.winners.[].bank_cfigure" op="add" value="1"/>
                    </ift>
                    <update property="@round.init_drawer" value="@#pre_next_main_player"/>
                    <update property="@scene.bank_cfigure" value="@#pre_next_main_player.bank_cfigure"/>
                </then>
                <else>
                    <update property="@round.winners" value=":(find_players(IsAttacter:false))"/>
                    <update property="@round.losers" value=":(find_players(IsAttacter:true))"/>
                    <!--进攻方分数<40，防守方赢, 防守方升1级 -->
                    <var name="#pre_the_other_defender" value=":(next_player_of(@#pre_cur_main_player, 3))" value_type="player"></var>
                    <!--交换主打-->
                    <update property="@#pre_cur_main_player.IsMainPlayer" value="false"/>
                    <update property="@#pre_the_other_defender.IsMainPlayer" value="true"/>

                    <update property="@round.winners.[].bank_cfigure" op="add" value="1"/>
                    <ift value_of="@#pre_one_attacter.Score" ret_is="int%0">
                        <!--进攻方分数=0，防守方升2级 -->
                        <update property="@round.winners.[].bank_cfigure" op="add" value="1"/>
                    </ift>
                    <update property="@round.init_drawer" value="@#pre_the_other_defender"/>
                    <update property="@scene.bank_cfigure" value="@#pre_the_other_defender.bank_cfigure"/>
                </else>
            </ift>

            <update property="@scene.defenders" value="@round.winners"/>
            <update property="@scene.attacters" value="@round.losers"/>
        </proc>

        <proc name="trick_end">

            <update property="@round.trick_winner" value=":(max_attr_of_player(str%trick_power))"/>
            <var name="#te_trick_winner" value_type="player" value="@round.trick_winner"/>
            <ift >
                <!--进攻方赢，得到分数牌-->
                <cases op="and">
                    <case step="292322" value_of="@#te_trick_winner.IsAttacter" ret_is="true"></case>
                    <case value_of="@round.trick_score" ret_gt="0"></case>
                </cases>
                <update property="@round.attacters.[].Score" op="add" value="@round.trick_score"></update>
            </ift>


            <!-- 最后圈输赢测试 如果attacter win, attacter将获得底牌的分数 -->
            <ift>
                <cases>
                    <case value_of=":(count_of(player_cards_of_free(@round.trick_winner)))" ret_is="0"/>
                    <case value_of="@round.kitty_score" ret_gt="0"/>
                </cases>
                <update property="@round.attacters.[].Score" op="add" value="@round.kitty_score"></update>
            </ift>
        </proc>

        <proc name="proc_example" params="#arg_player,#arg_cards">
            <var name="#f_val" value_type="int" value="0"/>
            <ift value_of=":(element_at(@#arg_cards, 0))" ret_not_is="str%s1">
                <update property="@#f_val" value="4"/>
            </ift>
            <ret value="@#f_val"></ret>
        </proc>

        <proc step="242233" name="get_cards_score" params="#arg_cards">
            <var name="#spts_score" value="0" value_type="int"/>
            <var name="#idx" value="0" value_type="int"/>
            <var name="#len" value_type="int" value=":(count_of(@#arg_cards))"/>
            <loop_until value_of="@#idx" ret_lt_as="@#len">
                <ift value_of=":(cfigure_of(element_at(@#arg_cards, @#idx)))" ret_is="5">
                    <update property="@#spts_score" op="add" value="5"/>
                </ift>

                <ift value_of=":(cfigure_of(element_at(@#arg_cards, @#idx)))" ret_is="10">
                    <update property="@#spts_score" op="add" value="10"/>
                </ift>
                <ift value_of=":(cfigure_of(element_at(@#arg_cards, @#idx)))" ret_is="13">
                    <update property="@#spts_score" op="add" value="10"/>
                </ift>
                <update property="@#idx" op="add" value="1"/>

            </loop_until>

            <ret value="@#spts_score"/>
        </proc>

        <proc name="get_card_base_power" params="#arg_cards">
            <var name="#gcbp_solo_card" value_type="card" value=":(element_at(@#arg_cards, 0))"/>
            <var name="#gcbp_base_power" value="0" value_type="int"/>
            <ift step="get_card_base_power-3" value_of=":(cfigure_of(@#gcbp_solo_card))" ret_is="1">
                <update property="@#gcbp_base_power" value="14"></update>
                <else>
                    <update property="@#gcbp_base_power" value=":(cfigure_of(@#gcbp_solo_card))"></update>
                </else>
            </ift>
            <ret value="@#gcbp_base_power"/>
        </proc>

        <proc name="get_player_trick_power" params="#arg_player, #arg_cards">
            <var name="#gptp_power"  value_type="int" value="0"/>
            <ift value_of=":(count_of(@#arg_cards))" ret_is="1" >
                <!--单牌-->
                <then>
                    <!--单牌-->
                    <var step="#gptp_solo_card" name="#gptp_solo_card" value_type="card" value=":(element_at(@#arg_cards, 0))"/>
                    <ift value_of=":(cfigure_of(@#gptp_solo_card))" ret_is="22">
                        <then>
                            <!--大王-->
                            <update property="@#gptp_power" value="51"/>
                        </then>
                        <else>
                           <ift value_of=":(cfigure_of(@#gptp_solo_card))" ret_is="21">
                               <then>
                                   <!--小王-->
                                   <update property="@#gptp_power" value="50"/>
                               </then>
                               <else>
                                   <ift value_of=":(cfigure_of(@#gptp_solo_card))" ret_as="@round.bank_cfigure">
                                       <update property="@#gptp_power" value="40"/>
                                       <else>
                                           <ift value_of=":(ctype_of(@#gptp_solo_card))" ret_as="@round.bank_ctype">
                                               <then>
                                                   <!--级牌-->
                                                   <update property="@#gptp_power" value="20"/>
                                                   <update step="194156" property="@#gptp_power" op="add" value=":(#get_card_base_power(@#gptp_solo_card))"/>
                                               </then>
                                               <else>
                                                   <!--副牌-->
                                                   <update step="192213" property="@#gptp_power" value=":(#get_card_base_power(@#gptp_solo_card))"/>
                                               </else>
                                           </ift>
                                       </else>
                                   </ift>
                               </else>
                           </ift>
                        </else>
                    </ift>
                </then>
                <else>
                    <!--TODO, 甩牌 炸牌
                    <ift value_of=""></ift>
                    -->
                </else>
            </ift>
            <ret value="@#gptp_power"/>

        </proc>
    </procs>

    <!--对于action，其内部可访问两个隐含的参数：
    @cmd_player: 执行此action的player
    @cmd_args:执行action传入的参数
    -->
    <actions>
        <!--叫主-->
        <action step="act1" name="jiaozhu">
            <update step="act1-1" property="@round.bank_ctype" value=":(ctype_of(element_at(@cmd_args, 0)))"/>
            <ift step="act1-2" value_of="@round.defenders" ret_is="none">
                <!--第一局-->
                <then>
                    <!--设置防守方-->
                    <update step="act1-2-1" property="@round.defenders" op="append" value="@cmd_player"/>
                    <update step="act1-2-2" property="@round.defenders" op="append" value=":(next_player_of(@cmd_player,2))"/>
                    <update step="act1-2-3" property="@cmd_player.IsMainPlayer" value="true"/>
                    
                    <!--设置进攻方-->
                    <update step="act1-2-4" property="@round.attacters" op="append" value=":(next_player_of(@cmd_player,1))"/>
                    <update property="@round.attacters" op="append" value=":(next_player_of(@cmd_player,3))"/>

                    <update step="292227" property="@round.defenders.[].IsDefender" value="true"/>
                    <update property="@round.defenders.[].IsAttacter" value="false"/>
                    <update property="@round.attacters.[].IsAttacter" value="true"/>
                    <update property="@round.attacters.[].IsDefender" value="false"/>

                    <update property="@round.trick_init_player" value="@cmd_player"/>
                </then>
            </ift>
            <pub_act exer="@cmd_player" to_players="@round.players" act="jiaozhu" args="@cmd_args"></pub_act>
        </action>

        <action name="liuju">
            <pub_msg players="@round.players" msg="liu ju"/>
        </action>

        <action name="pass_jiaozhu" text="pass">

        </action>>

        <action name="koupai" text="koupai">
            <check_param>
                <cases op="and">
                    <case value_of=":(count_of(@cmd_args))" ret_is="6"></case>
                    <case value_of=":(player_has_cards(@cmd_player, @cmd_args))" ret_is="true"/>
                </cases>
            </check_param>
            <update property="@round.koupai" value="@cmd_args"/>
            <playcards player="@cmd_player" cards="@cmd_args" alias="kuopai" cards_face_up="false"/>
            <update property="@round.kitty_score" value=":(#get_cards_score(@cmd_args))"/>
        </action>

        <action name="playcard" text="chupai">
            <ift value_of="@cmd_player" ret_as="@round.trick_leading_player">
                <then>
                    <update property="@round.is_trick_valid_leading_cards" value=":(#is_valid_leading_cards(@cmd_player, @cmd_args))"/>
                    <ift value_of="@round.is_trick_valid_leading_cards" ret_is="true">
                        <playcards player="@cmd_player" cards="@cmd_args" alias="chupai" cards_face_up="true"/>
                        <update property="@round.trick_leading_cards" value="@cmd_args"/>
                        <ift step="debugggg" value_of=":(count_of(@cmd_args))" ret_is="1">
                            <then>
                                <update property="@round.trick_leading_pattern" value="single"/>
                            </then>
                            <else>
                                <ift value_of=":(is_cards_same_cfigure(@cmd_args))" ret_is="true">
                                    <then>
                                        <update property="@round.trick_leading_pattern" value="squd"/>
                                    </then>
                                    <else>
                                         <update property="@round.trick_leading_pattern" value="shuai"/>
                                    </else>
                                </ift>
                            </else>
                        </ift>
                    </ift>
                    <update property="@cmd_player.trick_power" value=":(#get_player_trick_power(@cmd_player,@cmd_args))"/>
                </then>
                <else>
                    <update property="@round.is_valid_following_cards" value=":(#is_valid_following_cards(@cmd_player, @cmd_args))"/>
                    <ift value_of="@round.is_valid_following_cards" ret_is="true">
                        <playcards player="@cmd_player" cards="@cmd_args" alias="chupai" cards_face_up="true"/>
                        <update property="@cmd_player.trick_power" value=":(#get_player_trick_power(@cmd_player,@cmd_args))"/>
                    </ift>
                </else>
            </ift>
             <update step="act-playcard-2" property="@cmd_player.trick_score" value=":(#get_cards_score(@cmd_args))"/>

        </action>

        <action name="robot_lead_card">
            <var name="#fc_tmp_card" value_type="card" value="none"></var>
            <pick_cards from_player="@cmd_player" count="1" to_var="@#fc_tmp_card"/>
            <playcards player="@cmd_player" cards="@#fc_tmp_card" alias="chu pai" cards_face_up="true"/>
            <update property="@round.trick_leading_cards" value="@#fc_tmp_card"/>
            <update step="robot_lead_card-3" property="@round.is_trick_valid_leading_cards" value="true"/>
            <update step="robot_lead_card-4" property="@cmd_player.trick_score" value=":(#get_cards_score(@#fc_tmp_card))"/>
            <update property="@cmd_player.trick_power" value=":(#get_player_trick_power(@cmd_player,@#fc_tmp_card))"/>
            <update property="@round.trick_leading_pattern" value="single"/>
        </action>

        <action step="act-robot_follow_cards" name="robot_follow_cards">
            <var name="#rfc_played_cards" value_type="cards" value="none"/>
            <ift value_of="@round.trick_leading_pattern" ret_is="single">
                <then>
                    <var name="#rfc_want_type" value_type="str" value=":(ctype_of(element_at(@round.trick_leading_cards, 0)))"/>
                    <var name="#rfc_type_cards" value_type="cards" value=":(player_cards_of_ctype(@cmd_player,@#rfc_want_type))"/>
                    <var name="#rfc_type_cards_no_bank_figure" value_type="cards" value=":(parts_of_cards_ex_cfigure(@#rfc_type_cards, @round.bank_cfigure))"/>
                    <var name="#rfc_picked_cards" value_type="cards" value="none"/>
                    <ift value_of=":(count_of(@#rfc_type_cards_no_bank_figure))" ret_gt="0">
                        <then>
                            <!--有同花色-->
                            <update property="@#rfc_played_cards" value=":(element_at(@#rfc_type_cards_no_bank_figure, 0))"/>
                            <playcards player="@cmd_player" cards="@#rfc_played_cards" alias="chupai" cards_face_up="true"/>
                        </then>
                        <else>
                            <!--没有同花色-->
                            <ift value_of="@#rfc_want_type" ret_as="@round.bank_ctype">
                                <then>
                                    <!--起牌是主牌-->
                                    <ift value_of=":(count_of(@#rfc_type_cards))" ret_gt_as=":(count_of(@#rfc_type_cards_no_bank_figure))" >
                                        <then>
                                            <!--还有主点牌-->
                                            <var name="#rft_fig_cards" value_type="cards" value=":(parts_of_cards_of_cfigure(@#rfc_type_cards, @round.bank_cfigure))"/>
                                            <update property="@#rfc_played_cards" value=":(element_at(@#rft_fig_cards, 0))"/>
                                            <playcards player="@cmd_player" cards="@#rfc_played_cards" alias="chupai" cards_face_up="true"/>
                                        </then>
                                        <else>
                                            <!--没有主点牌-->
                                             <pick_cards from_player="@cmd_player" count="1" to_var="@#rfc_played_cards"/>
                                            <playcards player="@cmd_player" cards="@#rfc_played_cards" alias="chupai" cards_face_up="true"/>
                                        </else>
                                    </ift>
                                </then>
                                <else>
                                    <!--起牌是不是主牌-->
                                    <pick_cards from_player="@cmd_player" count="1" to_var="@#rfc_played_cards"/>
                                    <playcards player="@cmd_player" cards="@#rfc_played_cards" alias="chupai" cards_face_up="true"/>
                                </else>
                            </ift>
                        </else>
                    </ift>
                </then>
            </ift>
            <!--TODO for other patterns-->
            <update property="@cmd_player.trick_power" value=":(#get_player_trick_power(@cmd_player,@#rfc_played_cards))"/>
            <update property="@round.is_valid_following_cards" value="true"/>
        </action>


        <action name="robot_koupai" text="koupai">

            <pick_cards from_player="@cmd_player" count="6" to_var="@round.koupai"/>
            <playcards player="@cmd_player" cards="@round.koupai" alias="kuopai" cards_face_up="false"/>
            <update property="@round.kitty_score" value=":(#get_cards_score(@round.koupai))"/>
            <!--
            <pub_act exer="@cmd_player" to_players="@cmd_player" act="koupai" args="@round.koupai"/>
            <pub_act exer="@cmd_player" to_players="@#afk_other_players" act="koupai" args="list%*,*,*,*,*,*"/>
            -->
        </action>
    </actions>


    <running>
        <!--for debugging, start-->
        <!--<var name="test_var" value_type="cards" value="list%s1,s2,s3"/>
        <update property="@test_var" value="list%s4,s5,s6"/>
        <update property="@round.bank_cfigure" value=":(#proc_example(none, @test_var))"/>-->
        <!--for debugging, end-->

        <!--for debugging, start-->
        <!--
        <update property="@players.[].Score" value="20"/>
        <var name="drawer1" value="@scene.init_drawer" value_type="player"/>
        <act_opts timeout="500" timeout_act="pass" to_player="@drawer1">
                    <act_ref act="koupai" param="list%s2"/>
                    <act_ref act="pass" param="none"/>
        </act_opts>
        -->
        <!--for debugging, end-->

        <update step="1" property="@round.defenders" value="@scene.defenders"/>
        <update step="2" property="@round.attacters" value="@scene.attacters"/>
        <update step="3" property="@round.bank_cfigure" value="@scene.bank_cfigure"/>

        <var step="4" name="drawn_card" value="None" value_type="card"></var>
        <var step="5" name="drawer" value="@scene.init_drawer" value_type="player"/>

        <!--底牌6张-->
        <draw_cards step="6" to_var="@round.kitty" count="6"></draw_cards>
        <loop_until step="7" value_of=":(cards_count_not_deal())" ret_gt="0">
            <!--发牌（摸牌，起牌）-->
            <!--每次一张牌-->
            <draw_cards step="7-1" to_var="@drawn_card" count="1"></draw_cards>
            <send_cards step="7-2" player="@drawer" cards="@drawn_card" ></send_cards>

            <!--摸到将牌，可以叫主，前提是还没主-->
            <ift step="7-3" >
                <cases op="and">
                    <case value_of=":(cfigure_of(@drawn_card))" ret_as="@round.bank_cfigure"/>
                    <case value_of="@round.bank_ctype" ret_is="none"/>
                </cases>
                <act_opts timeout="30" timeout_act="pass_jiaozhu" to_player="@drawer">
                    <act_ref act="jiaozhu" param="@drawn_card"/>
                    <act_ref act="pass_jiaozhu" param="none"/>
                </act_opts>
            </ift>

            <update step="7-4" property="@drawer" value=":(next_player_of(@drawer))"/>
        </loop_until>

        <!--发牌结束,还没有选主-->
        <ift step="8" value_of="@round.bank_ctype" ret_is="none">
            <!--开始局，流局-->
            <ift value_of="@scene.defenders" ret_is="none">
               <then>
                    <pub_msg msg="liuju" players="@scene.players"></pub_msg>
                    <exitround/>
               </then>
               <else>
                    <!--从底牌中选主-->
                    <proc_ref proc="sel_bank_type_from_kitty"/>
               </else>
            </ift>
        </ift>

        <var step="9" name="main_defender" value_type="player" value=":(find_player(IsMainPlayer:true))"/>
        <!--底牌归于主打-->
        <send_cards step="10" cards="@round.kitty" player="@main_defender"></send_cards>

        <!--等待主打扣牌-->
        <act_opts step="11" timeout="10" timeout_act="robot_koupai" to_player="@main_defender">
                <act_ref act="koupai"/>
                <act_ref act="robot_koupai" hidden="true"/>
        </act_opts>

        <update step="12" property="@round.trick_leading_player" value="@main_defender"/>
        <update property="@round.trick_init_player" value="@main_defender"/>
        <!--<var step="13" name="trick_init_player" value_type="player" value="@main_defender"/>-->

        <var step="12-2" name="sorder" value_type="int" value="0"/>
        <var step="12-3" name="valid_following_cards" value_type="bool" value="false"/>
        <var step="12-4" name="follower" value_type="player" value="none"/>

        <!--进入打牌，从主打开始, 一局结束，主打手里没牌-->
        <loop_until step="14" value_of=":(count_of(player_cards_of_free(@round.trick_leading_player)))" ret_gt="0">
            <update property="@round.is_trick_valid_leading_cards" value="false"/>
            <loop_until step="14-1" value_of="@round.is_trick_valid_leading_cards" ret_is="false">
                <act_opts step="14-1-1" timeout="10" timeout_act="robot_lead_card" to_player="@round.trick_init_player">
                        <act_ref act="playcard"/>
                        <act_ref act="robot_lead_card" hidden="true"/>
                </act_opts>
            </loop_until>

            <update property="@sorder" value="1"/>
            <loop_until step="14-3" value_of="@sorder" ret_lt="4">
                <update property="@round.is_valid_following_cards" value="false"/>
                <update property="@follower" value=":(next_player_of(@round.trick_init_player, @sorder))"/>
                <loop_until value_of="@round.is_valid_following_cards" ret_is="false">
                    <act_opts timeout="10" timeout_act="robot_follow_cards" to_player="@follower">
                            <act_ref act="playcard"/>
                            <act_ref act="robot_follow_cards" hidden="true"/>
                    </act_opts>
                </loop_until>
                <update property="@sorder" op="add" value="1"/>
            </loop_until>

            <proc_ref step="14-4" proc="trick_end"/>
            <update step="14-5" property="@round.trick_init_player" value="@round.trick_winner"/>
            <update step="14-6" property="@round.trick_leading_player" value="@round.trick_init_player"/>
        </loop_until>

        <!--出牌结束，确定一局输赢玩家-->
        <proc_ref step="15" proc="round_end"/>
        <pub_msg players="@round.players" msg="str%Round finished"/>
        <pub_player_status players="@round.players"></pub_player_status>
        <pub_round_status players="@round.players"/>

        <!--广播一局胜负-->
        <!--<publish_round_winners_losers/>-->

        <!--广播累积胜负-->
        <!--<publish_total_scores/>-->
    </running>
</rule>